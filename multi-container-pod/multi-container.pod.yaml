apiVersion: apps/v1 # https://sl.bing.net/goldIaaEUzQ. apiVersion provided by k8s itself
kind: ReplicaSet
metadata:
  name: multi-container-pod
  labels:
    app: multi-container-pod
spec:
  replicas: 2
  selector:
    matchExpressions:
    # using operand AND
    # k8s will check selector regarding to label when create. when not match will be error
    - key: app
      operator: In
      values:
      - try-multi-container-pod
      - try-multi-container-pod2
    - key: env
      operator: In
      values:
      - local
      - testing
      - prod
  template:
    metadata:
      name: multi-container-pod-template
      labels:
        app: try-multi-container-pod
        env: local
    spec:
      containers:
      - name: multi-container-pod-node-app
        image: khannedy/nodejs-web
        ports:
        - containerPort: 3000
      - name: multi-container-pod-nginx
        image: nginx:stable-alpine3.17-slim
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Pod
metadata:
  name: multi-container-pod-curl
  # labels can't same with RS labels selector althogh pod yaml split to independent file. so the concept 1 pod 1 service, 1 rs 1 service and so on
  labels:
    app: try-multi-container-pod1
    env: local1
spec:
  containers:
  - name: multi-container-pod-curl
    image: khannedy/nginx-curl
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    ports:
    - containerPort: 81


---
apiVersion: v1
kind: Service
metadata:
  name: multi-container-pod-service
  labels:
    app: multi-container-pod
spec:
  selector:
    app: try-multi-container-pod
    env: local
  ports:
  - port: 8080
    targetPort: 80
    name: nginx
  - port: 3000
    targetPort: 3000
    name: node-js-web
  # due service concept above. it no need again
# - port: 81
#   targetPort: 81
#   name: curl


